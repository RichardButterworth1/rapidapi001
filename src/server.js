import express from 'express';import pino from 'pino';import pinoHttp from 'pino-http';import { z } from 'zod';import { config } from './config.js';import { normalizeJobTitles } from './utils/normalize.js';import { findEmployeesByTitles } from './services/companyService.js';const logger = pino({ level: process.env.LOG_LEVEL || 'info' });const app = express();app.use(express.json());app.use(pinoHttp({ logger }));const requestSchema = z.object({  organization: z.string().min(1),  jobTitles: z.union([    z.array(z.string().min(1)).min(3),    z.string().min(1)  ]),});app.post('/search', async (req, res) => {  const parsed = requestSchema.safeParse(req.body);  if (!parsed.success) {    return res.status(400).json({ error: parsed.error.format() });  }  const { organization, jobTitles } = parsed.data;  const titles = normalizeJobTitles(jobTitles);  if (titles.length < 3) {    return res.status(400).json({ error: 'At least 3 job titles required' });  }  req.log.info({ organization, titles }, 'Searching RapidAPI');  try {    const results = await findEmployeesByTitles(organization, titles);    res.json({      results,      meta: {        organization,        jobTitles: titles,        returned: results.length      }    });  } catch (err) {    req.log.error(err, 'RapidAPI error');    res.status(500).json({ error: 'Internal Server Error', details: err.message });  }});app.get('/health', (_, res) => {  res.json({ status: 'ok', env: config.env });});app.get('/', (_req, res) => {  res.json({ status: 'ok', env: config.env });});app.listen(config.port, () => {  logger.info(`Running on port ${config.port}`);});
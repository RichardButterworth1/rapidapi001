// src/services/companyService.jsimport { rapidapiClient } from '../rapidapiClient.js';import { config } from '../config.js';/** * Step 1: Search companies by name to get a company_id. */export async function lookupCompanyId(companyName) {  const resp = await rapidapiClient.get('/api/v1/company/search', {    params: { company: companyName, page: 1 },  });  const companies = resp.data.data || [];  // return the first match’s ID, or null if none  return companies.length > 0 ? companies[0].company_id : null;}/** * Step 2: Fetch employees by the numeric company_id. */export async function fetchEmployeesByCompanyId(companyId) {  const resp = await rapidapiClient.get('/api/v1/company/people', {    params: { company_id: companyId, page: 1 },  });  return resp.data.data || [];}/** * Public function used by /search: *   1) Resolve company name → company_id *   2) Fetch that company’s employees *   3) Filter by title keywords *   4) Return up to config.maxResults matches */export async function findEmployeesByTitles(companyName, titles) {  // 1) get the company ID  const companyId = await lookupCompanyId(companyName);  if (!companyId) return [];  // 2) fetch all employees on page 1  const people = await fetchEmployeesByCompanyId(companyId);  // 3) filter by title keywords (case‐insensitive substring match)  const filtered = people.filter((p) => {    if (!p.title) return false;    const lowerTitle = p.title.toLowerCase();    return titles.some((kw) => lowerTitle.includes(kw.toLowerCase()));  });  // 4) map to { name, jobTitle, linkedinProfileUrl } and limit  return filtered    .slice(0, config.maxResults)    .map((p) => ({      name: p.full_name,      jobTitle: p.title,      linkedinProfileUrl: p.url,    }));}
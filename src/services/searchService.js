// src/services/searchService.jsimport { rapidapiClient } from '../rapidapiClient.js';import { config } from '../config.js';/** * 1) companyProfile: get ID for orgName * 2) search people by job title + that company ID * 3) dedupe & limit to config.maxResults */export async function findEmployeesByTitles(orgName, titles) {  // 1) lookup company ID  let companyId;  try {    const resp = await rapidapiClient.get('/api/v1/company/profile', {      params: { company: orgName },    });    companyId = resp.data.data?.id;    if (!companyId) {      console.warn(`No company.id for "${orgName}"`);      return [];    }  } catch (err) {    console.error(      'lookupCompanyId error:',      err.response?.status,      err.response?.data || err.message    );    throw new Error('Company lookup failed');  }  const seen = new Set();  const results = [];  // 2) for each job title, search people in that company  for (const title of titles) {    let users = [];    try {      const resp = await rapidapiClient.get('/api/v1/search/people', {        params: {          name: title,          current_company: companyId,          page: 1,        },      });      users = resp.data.data || [];    } catch (err) {      console.error(        'searchPeople error for',        title,        err.response?.status,        err.response?.data || err.message      );      continue;    }    // 3) collect unique profiles    for (const u of users) {      if (results.length >= config.maxResults) break;      const url = u.url;      if (!url || seen.has(url)) continue;      seen.add(url);      results.push({        name: u.full_name,        jobTitle: u.title,        linkedinProfileUrl: url,      });    }    if (results.length >= config.maxResults) break;  }  return results;}